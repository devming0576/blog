项目计划书：个人品牌技术博客 (Project "Codex") v2
版本: 2.0

日期: 2025年7月25日

制定人:

项目负责人 / 开发者: 你

首席架构师: Gemini

1.0 项目概述 (Executive Summary)
本项目旨在构建一个现代、高性能、可扩展的个人技术博客平台。它不仅是一个内容发布工具，更是项目负责人技术能力的综合体现、一个完美的求职作品集 (Portfolio Piece)、以及未来个人品牌的数字基石。

核心功能:

面向公众的文章阅读、搜索、按标签筛选以及匿名评论功能。

一个安全的、仅供管理员使用的后台，用于通过Markdown创建、编辑和管理文章及标签。

目标用户:

读者: 对技术、编程和博主分享内容感兴趣的互联网用户。

管理员: 博主本人（即你）。

2.0 架构原则 (Guiding Principles)
我们将遵循以下核心原则来指导所有技术决策：

开发者体验优先 (Developer Experience First): 选择能最大化开发效率和愉悦度的工具与模式。

前后端明确分离 (Clear Separation of Concerns): 前端专注于用户体验，后端专注于业务逻辑。通过标准化的API合约进行通信。

类型安全贯穿始终 (End-to-End Type Safety): 利用TypeScript和Prisma实现全链路类型安全，减少运行时错误。

从第一天起就考虑部署 (Deployment-Ready from Day One): 所有开发工作都应在与生产环境一致的环境中进行，并建立自动化的CI/CD流程。

安全并非事后添加 (Security by Design): 安全措施（特别是后台访问控制）必须在架构设计阶段就予以考虑。

3.0 技术栈选型与理由 (Technology Stack & Justification)
层面

技术选型

理由 (Justification)

前端

Next.js (App Router)

React生态系统的事实标准，提供SSG/SSR混合渲染能力，性能优异，SEO友好。

后端

Nest.js

基于TypeScript的企业级Node.js框架，其模块化和依赖注入设计能构建出高度可维护和可扩展的后端服务。

数据库ORM

Prisma

下一代ORM，提供无与伦比的类型安全数据库操作体验，能与Nest.js和PostgreSQL完美集成。

数据库

PostgreSQL

功能最强大的开源关系型数据库，性能卓越，社区活跃，是现代应用的首选。

代码仓库

Monorepo (使用 Nx 或 Turborepo)

在单一仓库中管理前后端代码，便于代码共享（尤其是类型定义），简化依赖管理和统一构建流程。

4.0 系统架构设计 (System Architecture)
数据库模式 (schema.prisma) v2:

model Post {
  id        Int       @id @default(autoincrement())
  title     String    @unique
  slug      String    @unique
  content   String
  published Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  labels    LabelOnPost[] // 多对多关系
}

model Comment {
  id        Int      @id @default(autoincrement())
  username  String
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
}

model Label {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts LabelOnPost[] // 多对多关系
}

// 显式的多对多关系连接表
model LabelOnPost {
  post    Post   @relation(fields: [postId], references: [id])
  postId  Int
  label   Label  @relation(fields: [labelId], references: [id])
  labelId Int

  @@id([postId, labelId])
}

API合约 (API Contract) v2:

// --- 公共 API ---
GET    /api/posts                  // 获取所有已发布的文章列表
GET    /api/posts/:slug            // 获取单篇文章详情
GET    /api/posts/:postId/comments // 获取一篇文章的所有评论
POST   /api/posts/:postId/comments // 创建一条新评论
GET    /api/search?q=:query        // [新增] 根据关键词搜索文章
GET    /api/labels                 // [新增] 获取所有标签列表
GET    /api/labels/:name           // [新增] 获取特定标签下的所有文章

// --- 管理员认证 API ---
POST   /api/auth/login             // 管理员登录

// --- 受保护的管理 API (需要JWT) ---
GET    /api/admin/posts            // 获取所有文章（包括草稿）
POST   /api/admin/posts            // 创建新文章 (请求体包含标签)
PUT    /api/admin/posts/:id        // 更新文章 (请求体包含标签)
DELETE /api/admin/posts/:id        // 删除文章

5.0 开发与部署策略 (DevOps Strategy)
(此部分无变更)

6.0 分阶段执行路线图 (Phased Execution Roadmap) v2
Phase 0: 奠基与设置 (Foundation - 预计0.5周)

(无变更)

Phase 1: 核心内容MVP (Core MVP - 预计1周)

(无变更)

Phase 2: 管理员后台与内容管理 (Admin & CMS - 预计1.5周)

目标: 实现安全的内容创建和管理功能，包括标签管理。

可交付成果:

后端: AuthModule 开发完成。

后端: 所有受保护的文章管理API (POST, PUT, DELETE) 开发完成，并处理标签关系。

前端: 创建/admin路由，包含登录页、文章列表管理页、Markdown新建/编辑页面。

前端: 在新建/编辑页面中集成标签输入组件。

里程碑: 博主可以端到端地登录、发布、编辑（包括标签）和管理文章。

Phase 3: 内容发现与互动 (Content Discovery & Interaction - 预计1.5周)

目标: 实现搜索、标签筛选和评论功能。

可交付成果:

搜索功能: 后端实现搜索API，前端实现搜索栏和搜索结果页。

标签功能: 后端实现按标签筛选文章的API，前端实现标签归档页，并在文章卡片和详情页展示可点击的标签。

评论功能: 后端实现评论API，前端实现可交互的评论区组件。

Phase 4: 打磨、优化与上线 (Polish & Launch - 预计1周)

(无变更)

7.0 风险评估与缓解措施 (Risk Assessment & Mitigation)
(此部分无变更)

8.0 成功标准 (Definition of Success)
功能性标准:

访客可以流畅地浏览、搜索和按标签筛选文章。

访客可以成功提交评论。

管理员可以登录后台，并完整地执行文章的增删改查操作，包括管理标签。

非功能性标准: (无变更)