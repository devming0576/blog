项目设置与环境指南 (Project "Codex") v2
版本: 2.0

目的: 本文档提供为 "Codex" 项目建立完整本地开发环境所需的明确、分步的命令和配置。它是主项目计划中 Phase 0 的实践执行指南。

1.0 先决条件
在继续之前，请确保你的系统终端已安装并可访问以下软件。

Node.js: 版本 18.x 或更高 (推荐使用 nvm 管理Node版本)。

Docker & Docker Compose: 用于运行本地PostgreSQL数据库。

Git: 用于版本控制。

VS Code (推荐): 并安装以下插件：

ESLint

Prettier - Code formatter

Prisma

2.0 Phase 0: 分步环境设置
请精确按照以下步骤来构建你的开发环境。

步骤 1: 初始化 Monorepo
我们将使用 Nx 来创建我们的 monorepo。

打开终端，并导航到你希望创建项目的目录。

运行 Nx 初始化命令：

npx create-nx-workspace@latest codex-monorepo

在提示时，选择以下选项：

Which stack do you want to use? -> None (我们将手动添加应用)

Package Manager -> npm (或你的偏好)

进入你的新项目目录：

cd codex-monorepo

步骤 2: 生成前端和后端应用
现在，我们将在 monorepo 内创建 Next.js 和 Nest.js 应用。

为 Nx 添加 Next.js & Nest.js 插件：

npm install --save-dev @nx/next @nx/nest

生成 Next.js 前端应用：

nx g @nx/next:app frontend

接受默认选项，但在被问及 Styling 时，选择 Tailwind CSS。

生成 Nest.js 后端应用：

nx g @nx/nest:app backend

接受默认选项。

步骤 3: 设置本地数据库
我们将使用 Docker Compose 在本地运行一个 PostgreSQL 实例。

在 codex-monorepo 目录的根目录下，创建一个名为 docker-compose.yml 的文件。

将以下内容粘贴到其中：

version: '3.8'
services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: codex_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:

在 monorepo 的根目录下，为你的数据库连接字符串创建一个 .env 文件。此文件应被添加到 .gitignore。将以下行粘贴到其中：

DATABASE_URL="postgresql://myuser:mypassword@localhost:5432/codex_db"

启动数据库容器：

docker-compose up -d

步骤 4: 集成 Prisma
现在，让我们使用 Prisma 将我们的 Nest.js 后端连接到数据库。

安装 Prisma 依赖项 到 monorepo 的根目录。

npm install prisma --save-dev
npm install @prisma/client

初始化 Prisma：

npx prisma init --datasource-provider postgresql

配置你的 Prisma Schema (重要更新)。 打开新创建的 prisma/schema.prisma 文件，并将其内容替换为我们新的 v2 版本模型：

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String    @unique
  slug      String    @unique
  content   String
  published Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  labels    LabelOnPost[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  username  String
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
}

model Label {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts LabelOnPost[]
}

model LabelOnPost {
  post    Post   @relation(fields: [postId], references: [id])
  postId  Int
  label   Label  @relation(fields: [labelId], references: [id])
  labelId Int
  @@id([postId, labelId])
}

将 schema 推送到你的数据库。 此命令会读取你的 schema 并在你运行的 Docker 数据库中创建相应的表（Post, Comment, Label, _LabelToPost）。

npx prisma db push

生成 Prisma Client。

npx prisma generate

步骤 5: 运行全栈应用
安装所有依赖项：

npm install

运行两个应用。 打开根目录的 package.json 并添加以下脚本：

"scripts": {
  "dev": "nx run-many --target=serve --all"
},

现在，用一个命令启动所有服务：

npm run dev

3.0 环境就绪
你已成功完成 Phase 0。你的本地环境现在已配置完毕，并准备好开始 Phase 1 的开发。